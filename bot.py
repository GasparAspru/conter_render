import os
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ env ======
BOT_TOKEN = os.environ.get("BOT_TOKEN")
LOG_CHAT_ID = int(os.environ.get("LOG_CHAT_ID", "0"))   # –ø—Ä–∏–º–µ—Ä: -1001234567890 (–¥–ª—è –∫–∞–Ω–∞–ª–∞) –∏–ª–∏ –æ–±—ã—á–Ω—ã–π chat id
OWNER_ID = int(os.environ.get("OWNER_ID", "0"))         # —Ç–≤–æ–π Telegram ID (—á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Å–ª–∞–ª –ª–æ–≥ –æ —Ç–≤–æ–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö)
WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "").rstrip("/")  # https://your-service.onrender.com (–±–µ–∑ —Å–ª—ç—à–∞ –≤ –∫–æ–Ω—Ü–µ)
PORT = int(os.environ.get("PORT", "8000"))  # Render –∑–∞–¥–∞—ë—Ç PORT –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. :contentReference[oaicite:4]{index=4}

if not BOT_TOKEN:
    raise SystemExit("Error: BOT_TOKEN environment variable is required.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    now = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update.message:
        await update.message.reply_text(f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}! –¢—ã –≤–æ—à—ë–ª.")
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥ (–∏ —à–ª—ë–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ OWNER)
    if user.id != OWNER_ID and LOG_CHAT_ID:
        text = (
            f"üì• –ù–æ–≤—ã–π –≤—Ö–æ–¥:\n"
            f"üÜî ID: {user.id}\n"
            f"üë§ –ò–º—è: {user.first_name or '‚Äî'}\n"
            f"üí¨ Username: @{user.username or '‚Äî'}\n"
            f"üïí –í—Ä–µ–º—è: {now}"
        )
        await context.bot.send_message(chat_id=LOG_CHAT_ID, text=text)

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∂–∏–≤–æ–π")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))

    # –ï—Å–ª–∏ –∑–∞–¥–∞–ª–∏ WEBHOOK_URL ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º webhook (Render —Ç—Ä–µ–±—É–µ—Ç —Å–ª—É—à–∞—Ç—å –ø–æ—Ä—Ç –∏–∑ PORT). :contentReference[oaicite:5]{index=5}
    if WEBHOOK_URL:
        webhook_path = f"/webhook/{BOT_TOKEN}"  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        full_webhook = f"{WEBHOOK_URL}{webhook_path}"
        print("Starting webhook. Listening on 0.0.0.0:%s, webhook url: %s" % (PORT, full_webhook))
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url_path=webhook_path,
            webhook_url=full_webhook
        )
    else:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ ‚Äî polling
        print("WEBHOOK_URL not set ‚Äî starting polling (local mode)")
        app.run_polling()

if __name__ == "__main__":
    main()
